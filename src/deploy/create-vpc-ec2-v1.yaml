AWSTemplateFormatVersion: '2010-09-09'
Description: Create VPC EC2 -- Create a spot-priced AutoScaling group and a Bees With Machine Guns controller;
  execute the load test against the AutoScaling group and store the results in S3.
  Run /home/ec2-user/run-bees to execute load tests manually.
Parameters:
  Environment:
    Type: String
    Default: Development
    Description: Enter environment. Default is Development.
  InstanceTypeParameter:
    Type: String
    Default: t3a.medium
    Description: Enter instance size. Default is t3a.medium.
  WorkstationIp:
    Type: String
    Default: 69.121.41.175
    Description: The IP address of the workstation that can RDP into the instance.
  AMI:
    Type: AWS::EC2::Image::Id
    Default: ami-000c7b52e11f39ab0
    Description: The Windows AMI to use.
  Key:
    Type: String
    Default: sarabi-key-pair
    Description: The key used to access the instance.
  VPCcidr:
    Type: String
    Default: 10.0.0.0/16
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})$"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: Enter VPC CIDR
  VPCName:
    Type: String
    Default: Windows Target VPC
    Description: Enter the name of Your VPC
  PubSubnetNameA:
    Type: String
    Default: PubSubnetNameA
    Description: Enter the name of Your Public Subnet
  PubSubnetNameAZ:
    Type: String
    Default: us-east-2a
    Description: Enter the name of AZ of Public Subnet
  PubSubnetAcidr:
    Type: String
    Default: 10.0.2.0/24
    MinLength: 9
    MaxLength: 18
    Description: Enter the name of  Your Public Subnet
    AllowedPattern: "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})$"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PvtSubnetNameA:
    Type: String
    Default: PvtSubnetNameA
    Description: Enter the name of Your Private Subnet
  PvtSubnetNameAZ:
    Type: String
    Default: us-east-2b
    Description: Enter the name of AZ of Private Subnet
  PvtSubnetAcidr:
    Type: String
    Default: 10.0.3.0/24
    MinLength: 9
    MaxLength: 18
    Description: Enter the name of  Your Private Subnet
    AllowedPattern: "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})$"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub ${VPCcidr}
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${VPCName}
        - Key: Environment
          Value: !Sub ${Environment}
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PubSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref PubSubnetNameAZ
      VpcId: !Ref VPC
      CidrBlock: !Sub ${PubSubnetAcidr}
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${PubSubnetNameA}
  PvtSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref PvtSubnetNameAZ
      VpcId: !Ref VPC
      CidrBlock: !Sub ${PvtSubnetAcidr}
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${PvtSubnetNameA}
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: VPC Public Route
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: VPC Private Route
  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PubSubnetA
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PvtSubnetA
  NatGatewayEIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: NATGateway EIP
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PubSubnetA
      AllocationId: !Sub '${NatGatewayEIP.AllocationId}'
      Tags:
        - Key: Name
          Value: NATGateway
  NATRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTable
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Octopus Target Group"
      GroupDescription: "Tentacle traffic in from hosted static ips, and RDP in from a personal workstation"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Sub ${WorkstationIp}/32
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref Windows
  Windows:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AMI
      InstanceType:
        Ref: InstanceTypeParameter
      KeyName: !Ref Key
      SubnetId: !Ref PubSubnetA
      SecurityGroupIds:
        - Ref: InstanceSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 250
      UserData:
        Fn::Base64: !Sub |
          <powershell>
          Write-Host "Hello World!"
          </powershell>
      Tags:
        - Key: Appplication
          Value: Windows Server
        - Key: Domain
          Value: None
        - Key: Environment
          Value: Test
        - Key: LifeTime
          Value: Transient
        - Key: Name
          Value: Windows Server Worker
        - Key: OS
          Value: Windows
        - Key: OwnerContact
          Value: "@sarabilabsforever"
        - Key: Purpose
          Value: Triage Cloudformation Session
        - Key: Source
          Value: CloudFormation Script in Octopus Deploy
Outputs:
  InstanceId:
    Description: The instance ID of the web server
    Value: !Ref 'Windows'
  PublicIP:
    Description: Public IP address of the web server
    Value: !GetAtt [ Windows, PublicIp ]